// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// best_cut_node
List best_cut_node(char method, double lambda, NumericMatrix Data, NumericVector Labels, NumericVector W, int minleaf, int numLabels);
RcppExport SEXP _ODRF_best_cut_node(SEXP methodSEXP, SEXP lambdaSEXP, SEXP DataSEXP, SEXP LabelsSEXP, SEXP WSEXP, SEXP minleafSEXP, SEXP numLabelsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< char >::type method(methodSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Data(DataSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Labels(LabelsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type W(WSEXP);
    Rcpp::traits::input_parameter< int >::type minleaf(minleafSEXP);
    Rcpp::traits::input_parameter< int >::type numLabels(numLabelsSEXP);
    rcpp_result_gen = Rcpp::wrap(best_cut_node(method, lambda, Data, Labels, W, minleaf, numLabels));
    return rcpp_result_gen;
END_RCPP
}
// ppOpt
List ppOpt(IntegerVector y, NumericMatrix X, int q, std::string PPmethod, bool weight, int r, double lambda, double energy, double cooling, double TOL, int maxiter);
RcppExport SEXP _ODRF_ppOpt(SEXP ySEXP, SEXP XSEXP, SEXP qSEXP, SEXP PPmethodSEXP, SEXP weightSEXP, SEXP rSEXP, SEXP lambdaSEXP, SEXP energySEXP, SEXP coolingSEXP, SEXP TOLSEXP, SEXP maxiterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< int >::type q(qSEXP);
    Rcpp::traits::input_parameter< std::string >::type PPmethod(PPmethodSEXP);
    Rcpp::traits::input_parameter< bool >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< int >::type r(rSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< double >::type energy(energySEXP);
    Rcpp::traits::input_parameter< double >::type cooling(coolingSEXP);
    Rcpp::traits::input_parameter< double >::type TOL(TOLSEXP);
    Rcpp::traits::input_parameter< int >::type maxiter(maxiterSEXP);
    rcpp_result_gen = Rcpp::wrap(ppOpt(y, X, q, PPmethod, weight, r, lambda, energy, cooling, TOL, maxiter));
    return rcpp_result_gen;
END_RCPP
}
// predict_ODT
Rcpp::List predict_ODT(NumericMatrix Data, NumericMatrix nodeRotaMat, NumericVector nodeCutValue, NumericVector childNode, CharacterVector nodeLabel);
RcppExport SEXP _ODRF_predict_ODT(SEXP DataSEXP, SEXP nodeRotaMatSEXP, SEXP nodeCutValueSEXP, SEXP childNodeSEXP, SEXP nodeLabelSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type Data(DataSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type nodeRotaMat(nodeRotaMatSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type nodeCutValue(nodeCutValueSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type childNode(childNodeSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type nodeLabel(nodeLabelSEXP);
    rcpp_result_gen = Rcpp::wrap(predict_ODT(Data, nodeRotaMat, nodeCutValue, childNode, nodeLabel));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_ODRF_best_cut_node", (DL_FUNC) &_ODRF_best_cut_node, 7},
    {"_ODRF_ppOpt", (DL_FUNC) &_ODRF_ppOpt, 11},
    {"_ODRF_predict_ODT", (DL_FUNC) &_ODRF_predict_ODT, 5},
    {NULL, NULL, 0}
};

RcppExport void R_init_ODRF(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
